
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.time.LocalDate;
import java.time.ZoneId;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Lanz
 */
public class Return extends javax.swing.JFrame {

    /**
     * Creates new form Return
     */
    public Return() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tableBorrow = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtFieldReturnDate = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtFieldFine = new javax.swing.JTextField();
        txtFieldPay = new javax.swing.JTextField();
        txtFieldChange = new javax.swing.JTextField();
        btnReturn = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        txtFieldAccNum = new javax.swing.JTextField();
        btnFind = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setSize(new java.awt.Dimension(500, 700));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        tableBorrow.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Accession Number", "Student Name", "Student Number", "Borrow Date", "Due Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableBorrow);

        jLabel1.setText("Details:");

        jLabel2.setText("Return Date");

        jLabel3.setText("Fine");

        jLabel4.setText("Payment");

        jLabel5.setText("Change");

        txtFieldFine.setEditable(false);

        txtFieldPay.setEditable(false);

        txtFieldChange.setEditable(false);

        btnReturn.setText("Return");
        btnReturn.setEnabled(false);
        btnReturn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReturnActionPerformed(evt);
            }
        });

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        jLabel6.setText("Enter Accession Number:");

        btnFind.setText("Find");
        btnFind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindActionPerformed(evt);
            }
        });

        btnClear.setText("Clear");
        btnClear.setEnabled(false);
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnBack, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtFieldReturnDate, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtFieldFine, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtFieldPay, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnReturn)))
                            .addComponent(jLabel6)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(btnFind)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnClear))
                                .addComponent(txtFieldAccNum, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)
                                .addComponent(txtFieldChange)))
                        .addGap(0, 43, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtFieldAccNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnFind)
                            .addComponent(btnClear))
                        .addGap(45, 45, 45)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtFieldReturnDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtFieldFine, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(txtFieldPay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(9, 9, 9)
                        .addComponent(btnReturn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(txtFieldChange, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30)
                        .addComponent(btnBack))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    String[][] books = new String[100][5];
    String[][] borrow = new String[200][5];
    int rowTrack = 0;
    int rowTrack2 = 0;
    int rowFind = 0;
    int rowFind2 = 0;
    
    //This Method will read text from files and put it in a String
    String readFile(String fileName) throws IOException {
        BufferedReader br = new BufferedReader(new FileReader(fileName));
        try {
            StringBuilder sb = new StringBuilder();
            String line = br.readLine();
            while (line != null) {
                sb.append(line);
                sb.append("\n");
                line = br.readLine();
            }
            return sb.toString();
        } 
        finally {
            br.close();
        }
    }
    
    private void Clear()
    {
        txtFieldAccNum.setEditable(true);
        txtFieldAccNum.setText("");
        txtFieldFine.setText("");
        txtFieldPay.setText("");
        txtFieldPay.setEditable(false);
        btnClear.setEnabled(false);
        btnFind.setEnabled(true);
        btnReturn.setEnabled(false);
    }
    
    private void ReturnBook()
    {
        //This will update the borrow to remove the borrow entry from the borrow data
        File y = new File("borrow.txt");
        try {
            String text = readFile("borrow.txt");
            String toberemoved = borrow[rowFind][0] + "\\" + borrow[rowFind][1] + "\\" + borrow[rowFind][2] + "\\" + borrow[rowFind][3] + "\\" + borrow[rowFind][4] + "_\n";
            text = text.replace(toberemoved, "");
            //The removed entry will be added some details to put it in the records data
            toberemoved = borrow[rowFind][0] + "\\" + borrow[rowFind][1] + "\\" + borrow[rowFind][2] + "\\" + borrow[rowFind][3] + "\\" + borrow[rowFind][4] + "\\" 
                    + txtFieldReturnDate.getText() + "\\" + txtFieldFine.getText() + "_" + System.lineSeparator();
            try
            {
                Files.write(Paths.get("record.txt"), toberemoved.getBytes(), StandardOpenOption.APPEND);
            }
            catch(IOException e)
            {
                JOptionPane.showMessageDialog(null, e, "Error!", JOptionPane.WARNING_MESSAGE);
            }
            y.delete();
            try
            {
                if(!y.delete())
                {
                    y.delete();
                }
                Files.deleteIfExists(y.toPath());
                Files.write(Paths.get("borrow.txt"), text.getBytes(), StandardOpenOption.CREATE);
            }
            catch(IOException e)
            {
                JOptionPane.showMessageDialog(null, e, "Error!", JOptionPane.WARNING_MESSAGE);
            }
            
            //This will update the Table with the new borrow data
            if(!"".equals(text))
            {
                borrow = null;
                borrow = new String[100][5];
                String[] words1 = text.split("_\n");
                rowTrack2 = words1.length;
                for(int j = 0; j < 5; j++)
                {
                    for(int i = 0; i < words1.length; i++)
                    {
                        String[] words2 = words1[i].split("\\\\");
                        borrow[i][j] = words2[j];
                    }
                }
            }
            else
            {
                for(int i = 0; i < 5; i++)
                {
                    borrow[0][i] = "";
                }
            }
            rowTrack2++;
            RefreshTable();
            rowTrack2--;
        }
        catch(IOException e)
        {
            JOptionPane.showMessageDialog(null, e, "Error!", JOptionPane.WARNING_MESSAGE);
        }
        
        //This will trace the book's details to get to the returned book's Status
        File x = new File("books.txt") ;
        try{
            String text = readFile("books.txt");
            String[] words1 = text.split("_\n");
            rowTrack = words1.length;
            for(int j = 0; j < 5; j++)
            {
                for(int i = 0; i < words1.length; i++)
                {
                    String[] words2 = words1[i].split("\\\\");
                    books[i][j] = words2[j];
                }
            }
            String accnum = txtFieldAccNum.getText();
            for(int i = 0; i < rowTrack; i++)
            {
                if(accnum == null ? books[i][0] == null : accnum.equals(books[i][0]))
                {
                    rowFind2 = i;
                    break;
                }
            }
            //This part will set the book's Status back to Available
            books[rowFind2][4] = "Available";
            x.delete();
            try
            {
                x.createNewFile();
            }
            catch(IOException e)
            {
                JOptionPane.showMessageDialog(null, e, "Error!", JOptionPane.WARNING_MESSAGE);
            }
            String data = "";
            for(int i = 0; i < rowTrack; i++)
            {
                for(int j = 0; j < 5; j++)
                {
                    data += books[i][j];
                    if(j != 4)
                    {
                        data += "\\";
                    }
                }
                data += "_" + System.lineSeparator();
            }
            try
            {
                Files.write(Paths.get("books.txt"), data.getBytes(), StandardOpenOption.WRITE);
            }
            catch(IOException e)
            {
                JOptionPane.showMessageDialog(null, e, "Error!", JOptionPane.WARNING_MESSAGE);
            }
            
            
        }
        catch(IOException e)
        {
            JOptionPane.showMessageDialog(null, e, "Error!", JOptionPane.WARNING_MESSAGE);
        }
    }   
            
    //This Method is used to refresh the table when needed
    private void RefreshTable()
    {
        for(int i = 0; i < rowTrack2; i++)
        {
            for(int j = 0; j < 5; j++)
            {
                tableBorrow.setValueAt(borrow[i][j], i, j);
            }
        }
    }
       
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        //This will get the time today and output it in the date text field
        LocalDate today = LocalDate.now(ZoneId.of( "Pacific/Auckland" ));
        String dateNow = today.toString();
        txtFieldReturnDate.setText(dateNow);
        
        //Initialization of the data from books.txt
        try{
            String text = readFile("books.txt");
            if(!"".equals(text))
            {
                String[] words1 = text.split("_\n");
                rowTrack = words1.length;
                for(int j = 0; j < 5; j++)
                {
                    for(int i = 0; i < words1.length; i++)
                    {
                        String[] words2 = words1[i].split("\\\\");
                        books[i][j] = words2[j];
                    }
                }
            }
        }
        catch(IOException e)
        {
            JOptionPane.showMessageDialog(null, e, "Error!", JOptionPane.WARNING_MESSAGE);
        }
        
        //Initialization of the data from borrow.txt
        try{
            String text = readFile("borrow.txt");
            if(!"".equals(text))
            {
                String[] words1 = text.split("_\n");
                rowTrack2 = words1.length;
                for(int j = 0; j < 5; j++)
                {
                    for(int i = 0; i < words1.length; i++)
                    {
                        String[] words2 = words1[i].split("\\\\");
                        borrow[i][j] = words2[j];
                    }
                }
                RefreshTable();
            }
        }
        catch(IOException e)
        {
            JOptionPane.showMessageDialog(null, e, "Error!", JOptionPane.WARNING_MESSAGE);
        }
       
    }//GEN-LAST:event_formWindowOpened

    private void btnReturnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReturnActionPerformed
        String payment = txtFieldPay.getText();
        if(payment.matches("[0-9]+")) //This will check if the payment is only numbers
        {
            int pay = Integer.parseInt(payment);
            int fine = Integer.parseInt(txtFieldFine.getText());
            int change = pay - fine;
            String Change = Integer.toString(change);
            if(change >= 0) //This is to check if the payment was enough
            {
                txtFieldChange.setText(Change);
                //If it's enough then it will now process the return
                ReturnBook();
                Clear();
            }
            else
            {
                txtFieldChange.setText("Not Enough Payment!");
            }
        }
        else
        {
            JOptionPane.showMessageDialog(null, "Payment should only contain numbers!", "Invalid Characters", JOptionPane.WARNING_MESSAGE);
            txtFieldPay.setText("");
        }
    }//GEN-LAST:event_btnReturnActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        LMSForm main = new LMSForm();
        main.setLocationRelativeTo(null);
        main.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindActionPerformed
        //This will search for the book to be returned using the Accession Number
        String accnum = txtFieldAccNum.getText();
        boolean found = false;
        for(int i = 0; i < rowTrack2; i++)
        {
            if(accnum == null ? borrow[i][0] == null : accnum.equals(borrow[i][0]))
            {
                found = true;
                rowFind = i;
                break;
            }
        }
        if(found)
        {
            //This will display the fine to be paid after finding the book
            String dueDate = borrow[rowFind][4];
            String returnDate = txtFieldReturnDate.getText();
            String date1 = dueDate.substring(Math.max(dueDate.length() - 2, 0));
            String date2 = returnDate.substring(Math.max(returnDate.length() - 2, 0));
            int d1 = Integer.parseInt(date1);
            int d2 = Integer.parseInt(date2);
            int diff = d1 - d2;
            if(diff >= 0)
            {
                //If the student returns it on time, no need to pay for fines anymore
                txtFieldFine.setText("0");
                txtFieldPay.setText("0");
                txtFieldChange.setText("0");
            }
            else
            {
                //If it's past the due date it will calculate the fine and display it
                int fine = Math.abs(diff) *10;
                String finetopay = Integer.toString(fine);
                txtFieldFine.setText(finetopay);
                txtFieldPay.setEditable(true);
            }
            txtFieldAccNum.setEditable(false);
            btnReturn.setEnabled(true);
            btnClear.setEnabled(true);
            btnFind.setEnabled(false);
        }
        else
        {
            JOptionPane.showMessageDialog(null, "Accession Number does not exist!");
        }
    }//GEN-LAST:event_btnFindActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        Clear();
    }//GEN-LAST:event_btnClearActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Return.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Return.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Return.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Return.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Return().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnFind;
    private javax.swing.JButton btnReturn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableBorrow;
    private javax.swing.JTextField txtFieldAccNum;
    private javax.swing.JTextField txtFieldChange;
    private javax.swing.JTextField txtFieldFine;
    private javax.swing.JTextField txtFieldPay;
    private javax.swing.JTextField txtFieldReturnDate;
    // End of variables declaration//GEN-END:variables
}
