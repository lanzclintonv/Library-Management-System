/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import java.io.BufferedReader;
import java.util.*;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.Paths;
import javax.swing.JOptionPane;
import java.nio.file.Files;
import java.nio.file.StandardOpenOption;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Lanz
 */
public class Books extends javax.swing.JFrame {

    /**
     * Creates new form Books
     */
    public Books() {
        initComponents();
    }
    String[][] books = new String[100][5];
    int rowTrack = 0;
    int rowFind = 0;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableBooks = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        txtFieldAccNum = new javax.swing.JTextField();
        txtFieldTitle = new javax.swing.JTextField();
        txtFieldAuthor = new javax.swing.JTextField();
        txtFieldGenre = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        btnAdd = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        btnArchive = new javax.swing.JButton();

        jButton1.setText("jButton1");

        jButton2.setText("jButton2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        tableBooks.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Accession Number", "Title", "Author", "Genre", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableBooks);
        if (tableBooks.getColumnModel().getColumnCount() > 0) {
            tableBooks.getColumnModel().getColumn(0).setPreferredWidth(150);
        }

        jLabel1.setText("Accession Number");

        jLabel2.setText("Title");

        jLabel3.setText("Author");

        jLabel4.setText("Genre");

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnEdit.setText("Edit");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.setEnabled(false);
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnArchive.setText("Archive Book");
        btnArchive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnArchiveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel1)
                                        .addComponent(jLabel2))
                                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtFieldAccNum, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtFieldTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtFieldAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtFieldGenre, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnAdd)
                                .addGap(7, 7, 7)
                                .addComponent(btnEdit)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(btnUpdate)
                                    .addComponent(btnBack))))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnArchive)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(txtFieldAccNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtFieldTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtFieldAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtFieldGenre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAdd)
                            .addComponent(btnEdit)
                            .addComponent(btnUpdate))
                        .addGap(18, 18, 18)
                        .addComponent(btnArchive)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnBack))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 21, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void RefreshTable()
    {
        for(int i = 0; i < 100; i++)
        {
            for(int j = 0; j < 5; j++)
            {
                tableBooks.setValueAt(books[i][j], i, j);
            }
        }
    }
    
    //Method for checking if string is digits only
    public static boolean isNumeric(String str)  
{  
  try  
  {  
    int d = Integer.parseInt(str);  
  }  
  catch(NumberFormatException nfe)  
  {  
    return false;  
  }  
  return true;  
}
    //Method for checking first condition of Accession Number
    private boolean firAccNum()
    {
        String str = txtFieldAccNum.getText();
        String sub = str.substring(0, 4);
        return isNumeric(sub);
    }
    
    //Method for checking second condition of Accession Number
    private boolean secAccNum()
    {
        String str = txtFieldAccNum.getText();
        String sub = str.substring(5, 8);
        if(sub.matches(".*\\d+.*"))
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    
    //Method for checking third condition of Accession Number
    private boolean thiAccNum()
    {
        String str = txtFieldAccNum.getText();
        String sub = str.substring(9, 12);
        return isNumeric(sub);
    }
    
    //Method for reading files
    String readFile(String fileName) throws IOException {
    BufferedReader br = new BufferedReader(new FileReader(fileName));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append("\n");
            line = br.readLine();
        }
        return sb.toString();
    } finally {
        br.close();
    }
}
    
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        //This will initialize the table and the book array's data from the text
        try{
            String text = readFile("books.txt");
            if(!"".equals(text))
            {
                String[] words1 = text.split("_\n");
                rowTrack = words1.length;
                for(int j = 0; j < 5; j++)
                {
                    for(int i = 0; i < words1.length; i++)
                    {
                        String[] words2 = words1[i].split("\\\\");
                        books[i][j] = words2[j];
                    }
                }
                RefreshTable();
            }
        }
        catch(IOException e)
        {
            JOptionPane.showMessageDialog(null, e, "Error!", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_formWindowOpened

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        //This will check if one of the text fields are missing
        if("".equals(txtFieldAccNum.getText()) || "".equals(txtFieldTitle.getText()) || "".equals(txtFieldAuthor.getText()) || "".equals(txtFieldGenre.getText()))
        {
            JOptionPane.showMessageDialog(null, "One or more data is/are missing!", "Error!", JOptionPane.WARNING_MESSAGE);
        }
        else if((txtFieldAuthor.getText()).matches(".*\\d+.*") || (txtFieldGenre.getText()).matches(".*\\d+.*"))
        {
            JOptionPane.showMessageDialog(null, "Genre and Authors should not contain numbers!", "Error!", JOptionPane.WARNING_MESSAGE);
        }
        else if((txtFieldAccNum.getText()).length() != 13)
        {
            JOptionPane.showMessageDialog(null, "Accession Number Should Follow This Format: \n"
                    + "*Should consist of 13 characters\n"
                    + "*The first 5 characters are numbers\n"
                    + "*The second 4 characters are letters\n"
                    + "*The last 4 characters are numbers by year", "Error!", JOptionPane.WARNING_MESSAGE);
        }
        else if(!firAccNum())
        {
            JOptionPane.showMessageDialog(null, "Accession Number Should Follow This Format: \n"
                    + "*Should consist of 13 characters\n"
                    + "*The first 5 characters are numbers\n"
                    + "*The second 4 characters are letters\n"
                    + "*The last 4 characters are numbers by year", "Error!", JOptionPane.WARNING_MESSAGE);
        }
        else if(secAccNum())
        {
            JOptionPane.showMessageDialog(null, "Accession Number Should Follow This Format: \n"
                    + "*Should consist of 13 characters\n"
                    + "*The first 5 characters are numbers\n"
                    + "*The second 4 characters are letters\n"
                    + "*The last 4 characters are numbers by year", "Error!", JOptionPane.WARNING_MESSAGE);
        }
        else if(!thiAccNum())
        {
            JOptionPane.showMessageDialog(null, "Accession Number Should Follow This Format: \n"
                    + "*Should consist of 13 characters\n"
                    + "*The first 5 characters are numbers\n"
                    + "The second 4 characters are letters\n"
                    + "The last 4 characters are numbers by year", "Error!", JOptionPane.WARNING_MESSAGE);
        }
        else
        {
            books[rowTrack][0] = txtFieldAccNum.getText();
            books[rowTrack][1] = txtFieldTitle.getText();
            books[rowTrack][2] = txtFieldAuthor.getText();
            books[rowTrack][3] = txtFieldGenre.getText();
            books[rowTrack][4] = "Available";
            String add;
            add = txtFieldAccNum.getText() + "\\" + txtFieldTitle.getText() + "\\" + txtFieldAuthor.getText() + "\\" + txtFieldGenre.getText() + "\\" + "Available" + "_" + System.lineSeparator();
            try
            {
                Files.write(Paths.get("books.txt"), add.getBytes(), StandardOpenOption.APPEND);
            }
            catch(IOException e)
            {
                JOptionPane.showMessageDialog(null, e, "Error!", JOptionPane.WARNING_MESSAGE);
            }
            RefreshTable();
            txtFieldAccNum.setText("");
            txtFieldTitle.setText("");
            txtFieldAuthor.setText("");
            txtFieldGenre.setText("");
            rowTrack++;
        }
        
        

    }//GEN-LAST:event_btnAddActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        String accnum = JOptionPane.showInputDialog("Enter the Accession Number of the book to edit: ");
        boolean found = false;
        boolean avail = false;
        for(int i = 0; i < rowTrack; i++)
        {
            if(accnum == null ? books[i][0] == null : accnum.equals(books[i][0]))
            {
                found = true;
                rowFind = i;
                break;
            }
        }
        if(found)
        {
            String stat = books[rowFind][4];
            if("Available\r".equals(stat) || "Available".equals(stat))
            {
                avail = true;
            }
            if(avail)
            {
                btnEdit.setEnabled(false);
                btnAdd.setEnabled(false);
                txtFieldAccNum.setText(accnum);
                txtFieldAccNum.setEditable(false);
                txtFieldTitle.setText(books[rowFind][1]);
                txtFieldAuthor.setText(books[rowFind][2]);
                txtFieldGenre.setText(books[rowFind][3]);
                btnUpdate.setEnabled(true);
            }
            else
            {
                JOptionPane.showMessageDialog(null, "A borrowed book cannot be edited!");
            }
        }
        else
        {
            JOptionPane.showMessageDialog(null, "Accession Number has no match!");
        }
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        books[rowFind][1] = txtFieldTitle.getText();
        books[rowFind][2] = txtFieldAuthor.getText();
        books[rowFind][3] = txtFieldGenre.getText();
        books[rowFind][4] = "Available";
        File x = new File("books.txt");
        x.delete();
        try
        {
            x.createNewFile();
        }
        catch(IOException e)
        {
            JOptionPane.showMessageDialog(null, e, "Error!", JOptionPane.WARNING_MESSAGE);
        }
        String data = "";
        for(int i = 0; i < rowTrack; i++)
        {
            for(int j = 0; j < 5; j++)
            {
                data += books[i][j];
                if(j != 4)
                {
                    data += "\\";
                }
            }
            data += "_" + System.lineSeparator();
        }
        try
        {
            Files.write(Paths.get("books.txt"), data.getBytes(), StandardOpenOption.WRITE);
        }
        catch(IOException e)
        {
            JOptionPane.showMessageDialog(null, e, "Error!", JOptionPane.WARNING_MESSAGE);
        }
        RefreshTable();
        btnAdd.setEnabled(true);
        btnEdit.setEnabled(true);
        btnUpdate.setEnabled(false);
        txtFieldAccNum.setEditable(true);
        txtFieldAccNum.setText("");
        txtFieldTitle.setText("");
        txtFieldAuthor.setText("");
        txtFieldGenre.setText("");
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        LMSForm main = new LMSForm();
        main.setLocationRelativeTo(null);
        main.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnArchiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnArchiveActionPerformed
        String accnum = JOptionPane.showInputDialog("Enter the Accession Number of the book to archive: ");
        boolean found = false;
        boolean avail = false;
        for(int i = 0; i < rowTrack; i++)
        {
            if(accnum == null ? books[i][0] == null : accnum.equals(books[i][0]))
            {
                found = true;
                rowFind = i;
                break;
            }
        }
        if(found)
        {
            String stat = books[rowFind][4];
            if("Available\r".equals(stat) || "Available".equals(stat))
            {
                avail = true;
            }
            if(avail)
            {
                try {
                File x = new File("books.txt");
                String text = readFile("books.txt");
                String toberemoved = books[rowFind][0] + "\\" + books[rowFind][1] + "\\" + books[rowFind][2] + "\\" + books[rowFind][3] 
                        + "\\" + books[rowFind][4] + "_\n";
                text = text.replace(toberemoved, "");
                x.delete();
                Files.write(Paths.get("archives.txt"), toberemoved.getBytes(), StandardOpenOption.APPEND);
                Files.write(Paths.get("books.txt"), text.getBytes(), StandardOpenOption.CREATE);
                if(!"".equals(text))
                {
                    books = null;
                    books = new String[100][5];
                    String[] words1 = text.split("_\n");
                    rowTrack = words1.length;
                    for(int j = 0; j < 5; j++)
                    {
                        for(int i = 0; i < words1.length; i++)
                        {
                            String[] words2 = words1[i].split("\\\\");
                            books[i][j] = words2[j];
                        }
                    }
                }
                else
                {
                    for(int i = 0; i < 5; i++)
                    {
                        books[0][i] = "";
                    }
                }
                rowTrack++;
                RefreshTable();
                rowTrack--;
                } catch (IOException ex) {
                Logger.getLogger(Books.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            else
            {
                JOptionPane.showMessageDialog(null, "A borrowed book cannot be archived!");
            }
        }
        else
        {
            JOptionPane.showMessageDialog(null, "Accession Number has no match!");
        }
    }//GEN-LAST:event_btnArchiveActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Books.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Books.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Books.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Books.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Books().setVisible(true);
            }
        });
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnArchive;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableBooks;
    private javax.swing.JTextField txtFieldAccNum;
    private javax.swing.JTextField txtFieldAuthor;
    private javax.swing.JTextField txtFieldGenre;
    private javax.swing.JTextField txtFieldTitle;
    // End of variables declaration//GEN-END:variables
}
